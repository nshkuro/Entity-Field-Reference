<?php

/**
 * Implements hook_menu().
 */
function entity_field_reference_menu() {
  $items = array();
  $items['entity_field_reference/autocomplete/single/%/%/%/%'] = array(
    'title' => 'Entity Field Reference Autocomplete',
    'page callback' => 'entity_field_reference_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access callback' => 'entity_field_reference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5, 6),
    'type' => MENU_CALLBACK,
  );
  $items['entity_field_reference/autocomplete/tags/%/%/%/%'] = array(
    'title' => 'Entity Field Reference Autocomplete',
    'page callback' => 'entity_field_reference_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access callback' => 'entity_field_reference_autocomplete_access_callback',
    'access arguments' => array(2, 3, 4, 5, 6),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_field_formatter_info().
 */
function entity_field_reference_field_formatter_info() {
  return array(
    'entity_field_reference' => array(
      'label' => t('Entity field reference'),
      'description' => t('Display the selected field of the entity.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'field' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function entity_field_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'entity_field_reference') {
    $entity_type = !empty($field['settings']['target_type']) ? $field['settings']['target_type'] : NULL;
    $entity_bundles = !empty($field['settings']['handler_settings']['target_bundles']) ? $field['settings']['handler_settings']['target_bundles'] : $entity_type;
    $fields = array();
    $allowed_field_types = array(
      'text',
      'number_integer',
      'number_float',
      'number_decimal',
      'list_integer',
      'list_float',
      'list_text',
    );
    if (!empty($entity_bundles)) {
      if (is_array($entity_bundles)) {
        foreach ($entity_bundles as $entity_bundle) {
          $f = field_info_instances($entity_type, $entity_bundle);
          $fields = $fields + $f;
        }
      }
      else {
        $fields = field_info_instances($entity_type);
        foreach ($fields as $bundle => $value) {
          $fields = $fields + $value;
        }
      }
    }

    $options = array();
    if (!empty($fields)) {
      foreach ($fields as $field_key => $field_value) {
        $field_info = field_info_field($field_key);
        if ($field_key != $field['field_name'] && in_array($field_info['type'], $allowed_field_types)) {
          $options[$field_key] = $field_value['label'];
        }
      }
    }

    $element['field'] = array(
      '#title' => t('Link label to the referenced entity'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $settings['field'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function entity_field_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  if ($display['type'] == 'entity_field_reference') {
    $summary[] = $settings['field'] ? $settings['field'] : t('Default field');
  }
  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function entity_field_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'entity_field_reference':
      $field_name = $field['field_name'];
      if (!empty($entity->{$field_name})) {
        $target_type = $field['settings']['target_type'];
        foreach ($items as $delta => $item) {
          $ids[] = $item['target_id'];
        }
        $target_entities = entity_load($target_type, $ids);
        foreach ($target_entities as $target_entity) {
          if(!empty($target_entity->{$settings['field']})) {
            $output = field_get_items($target_type, $target_entity, $settings['field'], $langcode);
            $output = $output[0]['value'];
            $result[] = array('#markup' => $output);
          }
        }
      }
      break;
  }
  return $result;
}

/**
 * Implements hook_field_info_alter().
 */
function entity_field_reference_field_info_alter(&$info) {
  foreach ($info as $field_type => $field_type_info) {
    $info[$field_type]['settings'] += array(
      'entity_field_reference' => FALSE,
    );
  }
}

function entity_field_reference_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'entityreference') {
    $target_type = $form['#field']['settings']['target_type'];
    $target_bundles = !empty($form['#field']['settings']['handler_settings']['target_bundles']) ? $form['#field']['settings']['handler_settings']['target_bundles'] : array();
    $entity_info = entity_get_info($target_type);

    $fields = array();
    $options = array(0 => t('Default (title)'));
    if (!empty($target_bundles)) {
      foreach ($target_bundles as $target_bundle) {
        $fields[$target_bundle] = field_info_instances($target_type, $target_bundle);
      }
    }
    else {
      $fields = field_info_instances($target_type);
    }

    $allowed_field_types = array(
      'text',
      'number_integer',
      'number_float',
      'number_decimal',
      'list_integer',
      'list_float',
      'list_text',
    );

    if (!empty($fields)) {
      foreach ($fields as $bundle => $fs) {
        if (isset($entity_info['bundles'][$bundle])) {
          $bundle = $entity_info['bundles'][$bundle];
        }
        foreach ($fs as $field_key => $field) {
          $field_info = field_info_field($field_key);
          if ($field_key != $form['#field']['field_name'] && in_array($field_info['type'], $allowed_field_types)) {
            $options[$bundle['label']][$field_key] = $field['label'];
          }
        }
      }
    }

    $default_value_field = !empty($form['#field']['settings']['entity_field_reference_wrapper']['entity_field_reference']) ? $form['#field']['settings']['entity_field_reference_wrapper']['entity_field_reference'] : 0;
    $default_value_instance = !empty($form['#instance']['settings']['entity_field_reference_wrapper']['entity_field_reference']) ? $form['#instance']['settings']['entity_field_reference_wrapper']['entity_field_reference'] : 0;

    $form['field']['settings']['entity_field_reference_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Reference field'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 10,
    );
    $form['field']['settings']['entity_field_reference_wrapper']['entity_field_reference'] = array(
      '#title' => t('Reference field'),
      '#description' => t('Please note: Appropriate target bundle should be enabled.'),
      '#type' => 'select',
      '#options' => $options,
      '#multiple' => TRUE,
      '#default_value' => $default_value_field,
    );

    $form['instance']['settings']['entity_field_reference_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Reference field'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 10,
    );
    $form['instance']['settings']['entity_field_reference_wrapper']['entity_field_reference'] = array(
      '#title' => t('Reference field'),
      '#type' => 'select',
      '#options' => $options,
      '#multiple' => TRUE,
      '#default_value' => $default_value_instance,
    );
  }
}



function entity_field_reference_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'entityreference') {

    $instance = $context['instance'];
    $field = $context['field'];

    $instance_value = !empty($context['instance']['settings']['entity_field_reference_wrapper']['entity_field_reference']) ? $context['instance']['settings']['entity_field_reference_wrapper']['entity_field_reference'] : NULL;
    $field_value =  !empty($context['field']['settings']['entity_field_reference_wrapper']['entity_field_reference']) ? $context['field']['settings']['entity_field_reference_wrapper']['entity_field_reference'] : NULL;
    $f = $instance_value ? $instance_value : $field_value;
    if ($f) {
      if ($instance['widget']['type'] == 'entityreference_autocomplete' || $instance['widget']['type'] == 'entityreference_autocomplete_tags') {
        $entity_type = $instance['entity_type'];
        if (isset($element['target_id'])) {
          $entity = isset($element['target_id']['#entity']) ? $element['target_id']['#entity'] : NULL;
        }
        else {
          $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
        }
        $items = $context['items'];
        $delta = isset($element['target_id']) ? $element['target_id']['#delta'] : $element['#delta'];

        if ($instance['widget']['type'] == 'entityreference_autocomplete') {
          // We let the Field API handles multiple values for us, only take
          // care of the one matching our delta.
          if (isset($items[$delta])) {
            $items = array($items[$delta]);
          }
          else {
            $items = array();
          }
        }

        $entity_ids = array();
        $entity_labels = array();

        // Build an array of entities ID.
        foreach ($items as $item) {
          $entity_ids[] = $item['target_id'];
        }

        // Load those entities and loop through them to extract their labels.
        $entities = entity_load($field['settings']['target_type'], $entity_ids);

        foreach ($entities as $entity_id => $entity_item) {
          foreach ($f as $field_name) {
            $label = isset($entity_item->{$field_name}[$entity_item->language][0]['value']) ? $entity_item->{$field_name}[$entity_item->language][0]['value'] : FALSE;
            $key = "$label ($entity_id)";
            // Labels containing commas or quotes must be wrapped in quotes.
            if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
              $key = '"' . str_replace('"', '""', $key) . '"';
            }
            $entity_labels[] = $key;
          }
        }

        // Prepare the autocomplete path.
        if (!empty($instance['widget']['settings']['path'])) {
          $autocomplete_path = $instance['widget']['settings']['path'];
        }
        else {
          $autocomplete_path = $instance['widget']['type'] == 'entityreference_autocomplete' ? 'entity_field_reference/autocomplete/single' : 'entity_field_reference/autocomplete/tags';
        }

        $autocomplete_path .= '/' . $field['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . implode(',', $f) . '/';
        // Use <NULL> as a placeholder in the URL when we don't have an entity.
        // Most webservers collapse two consecutive slashes.
        $id = 'NULL';
        if ($entity) {
          list($eid) = entity_extract_ids($entity_type, $entity);
          if ($eid) {
            $id = $eid;
          }
        }
        $autocomplete_path .= $id;
        if(isset($element['target_id'])) {
          $element['target_id']['#autocomplete_path'] = $autocomplete_path;
        }
        else {
          $element['#autocomplete_path'] = $autocomplete_path;
        }

        if(isset($element['target_id'])) {
          $element['target_id']['#default_value'] = implode(', ', $entity_labels);
        }
        else {
          $element['#default_value'] = implode(', ', $entity_labels);
        }
      }
      else {
        $target_type = $context['field']['settings']['target_type'];
        $bundles = $context['field']['settings']['handler_settings']['target_bundles'];
        $options = _entity_field_reference_get_options($f, $target_type, $bundles);
        $default_values = array();
        if (!empty($element['#default_value'])) {
          foreach ($element['#default_value'] as $df) {
            foreach ($f as $fn) {
              $default_values[] = $fn . ':' . $df;
            }
          }
        }
        $element['#default_value'] = $default_values;
        $element['#options'] = $options;
        $element['#element_validate'][] = '_entity_field_reference_options_validate';
      }
    }
  }
}

function _entity_field_reference_options_validate($element, &$form_state, $form) {
  $lng = $form_state['values']['language'];
  if (!empty($form_state['values'][$element['#field_name']][$lng])) {
    $ids = $form_state['values'][$element['#field_name']][$lng];
    foreach ($ids as $i => $value) {
      $entity_id = $value['target_id'];
      $entity_id = explode(':', $entity_id);
      $target_id = array_pop($entity_id);
      $form_state['values'][$element['#field_name']][$lng][$i] = array('target_id' => $target_id);
    }
  }
}


function _entity_field_reference_get_options($field_names, $target_type, $target_bundles = array()) {
  $options = array();
  $first = array_shift($field_names);
  $query = db_select('field_data_' . $first, $first);
  $query = $query->fields($first, array('entity_id', 'bundle',  $first . '_value'));

  if (!empty($field_names)) {
    foreach ($field_names as $field_name) {
      $query->leftJoin('field_data_'. $field_name, $field_name, $first . '.entity_id = ' . $field_name . '.entity_id');
      $query = $query->fields($field_name, array('entity_id', 'bundle',  $field_name . '_value'));
    }
  }

  $count = count($target_bundles);
  $entity_info = entity_get_info($target_type);

  if ($count > 1) {
    $query = $query->condition($first . '.bundle', $target_bundles, 'IN');
    $result = $query->execute();
    foreach ($result as $row) {
      $bundle_info = !empty($entity_info['bundles'][$row->bundle]) ? $entity_info['bundles'][$row->bundle] : NULL;
      $options[$bundle_info['label']][$first . ':' . $row->entity_id] = $row->{$first . '_value'};
      if (!empty($field_names)) {
        foreach ($field_names as $field_name) {
          if (!empty($row->{$field_name . '_entity_id'})) {
            $options[$bundle_info['label']][$field_name . ':' . $row->entity_id] = $row->{$field_name . '_value'};
          }
        }
      }
    }
  }
  elseif ($count == 0) {
    $result = $query->execute();
    foreach ($result as $row) {
      $bundle_info = !empty($entity_info['bundles'][$row->bundle]) ? $entity_info['bundles'][$row->bundle] : NULL;
      $options[$bundle_info['label']][$first . ':' . $row->entity_id] = $row->{$first . '_value'};
      if (!empty($field_names)) {
        foreach ($field_names as $field_name) {
          if (!empty($row->{$field_name . '_entity_id'})) {
            $options[$bundle_info['label']][$field_name . ':' . $row->entity_id] = $row->{$field_name . '_value'};
          }
        }
      }
    }
  }
  else {
    $query = $query->condition($first . '.bundle', $target_bundles, 'IN');
    $result = $query->execute();
    foreach ($result as $row) {
      $options[$first . ':' . $row->entity_id] = $row->{$first . '_value'};
        if (!empty($field_names)) {
        foreach ($field_names as $field_name) {
          if (!empty($row->{$field_name . '_entity_id'})) {
            $options[$field_name . ':' . $row->entity_id] = $row->{$field_name . '_value'};
          }
        }
      }
    }
  }

  return $options;
}

function entity_field_reference_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $field_reference, $entity_id = '', $string = '') {
// If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments and $string will only be a partial. We want
  //  to make sure we recover the intended $string.
  $args = func_get_args();

  // Shift off the $type, $field_name, $entity_type, $bundle_name, and $entity_id args.
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  $string = implode('/', $args);

  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);

  $field_reference = explode(',', $field_reference);

  return entity_field_reference_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $field_reference, $entity_id, $string);
}

function entity_field_reference_autocomplete_access_callback($type, $field_name, $entity_type, $bundle_name) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);

  if (!$field || !$instance || $field['type'] != 'entityreference' || !field_access('edit', $field, $entity_type)) {
    return FALSE;
  }
  return TRUE;
}

function entity_field_reference_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $field_reference, $entity_id = '', $string = '') {
  $matches = array();
  $entity = NULL;
  if ($entity_id !== 'NULL') {
    $entity = entity_load_single($entity_type, $entity_id);
    $has_view_access = (entity_access('view', $entity_type, $entity) !== FALSE);
    $has_update_access = (entity_access('update', $entity_type, $entity) !== FALSE);
    if (!$entity || !($has_view_access || $has_update_access)) {
      return MENU_ACCESS_DENIED;
    }
  }
  if ($type == 'tags') {
    // The user enters a comma-separated list of tags. We only autocomplete the last tag.
    $tags_typed = drupal_explode_tags($string);
    $tag_last = drupal_strtolower(array_pop($tags_typed));
    if (!empty($tag_last)) {
      $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
    }
  }
  else {
    // The user enters a single tag.
    $prefix = '';
    $tag_last = $string;
  }

  if (isset($tag_last)) {
    // Get an array of matching entities.
    $entity_labels = array();
    foreach ($field_reference as $field_name) {
      $query = db_select('field_data_' . $field_name, $field_name)
        ->fields($field_name, array('entity_id', 'bundle',  $field_name . '_value'))
        ->condition($field_name . '_value', '%' . $tag_last .'%', 'LIKE');
      if (!empty($field['settings']['handler_settings']['target_bundles'])) {
        $query = $query->condition($field_name . '.bundle', $field['settings']['handler_settings']['target_bundles'], 'IN');
      }
      $result = $query->execute();
      if ($result) {
        foreach ($result as $row) {
          $entity_labels[$row->bundle][$row->entity_id] = $row->{$field_name . '_value'};
        }
      }
    }

    // Loop through the products and convert them into autocomplete output.
    foreach ($entity_labels as $values) {
      foreach ($values as $entity_id => $label) {
        $key = "$label ($entity_id)";
        // Strip things like starting/trailing white spaces, line breaks and tags.
        $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
        // Names containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
          $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $matches[$prefix . $key] = '<div class="reference-autocomplete">' . $label . '</div>';
      }
    }
  }

  drupal_json_output($matches);
}